#! /bin/sh
set -e

# grub-mkconfig helper script.
# Copyright (C) 2006,2007,2008,2009,2010  Free Software Foundation, Inc.
#
# GRUB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GRUB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.

prefix="@prefix@"
exec_prefix="@exec_prefix@"
datarootdir="@datarootdir@"

. "$pkgdatadir/grub-mkconfig_lib"

export TEXTDOMAIN=@PACKAGE@
export TEXTDOMAINDIR="@localedir@"

CLASS="--class gnu-linux --class gnu --class os --unrestricted"

if [ "x${GRUB_DISTRIBUTOR}" = "x" ] ; then
  OS="$(eval $(grep PRETTY_NAME /etc/os-release) ; echo ${PRETTY_NAME})"
  CLASS="--class $(eval $(grep '^ID_LIKE=\|^ID=' /etc/os-release) ; [ -n "${ID_LIKE}" ] && echo ${ID_LIKE} || echo ${ID}) ${CLASS}"
else
  OS="${GRUB_DISTRIBUTOR}"
  CLASS="--class $(echo ${GRUB_DISTRIBUTOR} | tr 'A-Z' 'a-z' | cut -d' ' -f1|LC_ALL=C sed 's,[^[:alnum:]_],_,g') ${CLASS}"
fi

# loop-AES arranges things so that /dev/loop/X can be our root device, but
# the initrds that Linux uses don't like that.
case ${GRUB_DEVICE} in
  /dev/loop/*|/dev/loop[0-9])
    GRUB_DEVICE=`losetup ${GRUB_DEVICE} | sed -e "s/^[^(]*(\([^)]\+\)).*/\1/"`
  ;;
esac

# Default to disabling partition uuid support to maintian compatibility with
# older kernels.
GRUB_DISABLE_LINUX_PARTUUID=${GRUB_DISABLE_LINUX_PARTUUID-true}

# btrfs may reside on multiple devices. We cannot pass them as value of root= parameter
# and mounting btrfs requires user space scanning, so force UUID in this case.
if ( [ "x${GRUB_DEVICE_UUID}" = "x" ] && [ "x${GRUB_DEVICE_PARTUUID}" = "x" ] ) \
    || ( [ "x${GRUB_DISABLE_LINUX_UUID}" = "xtrue" ] \
	&& [ "x${GRUB_DISABLE_LINUX_PARTUUID}" = "xtrue" ] ) \
    || ( ! test -e "/dev/disk/by-uuid/${GRUB_DEVICE_UUID}" \
	&& ! test -e "/dev/disk/by-partuuid/${GRUB_DEVICE_PARTUUID}" ) \
    || ( test -e "${GRUB_DEVICE}" && uses_abstraction "${GRUB_DEVICE}" lvm ); then
  LINUX_ROOT_DEVICE=${GRUB_DEVICE}
elif [ "x${GRUB_DEVICE_UUID}" = "x" ] \
    || [ "x${GRUB_DISABLE_LINUX_UUID}" = "xtrue" ]; then
  LINUX_ROOT_DEVICE=PARTUUID=${GRUB_DEVICE_PARTUUID}
else
  LINUX_ROOT_DEVICE=UUID=${GRUB_DEVICE_UUID}
fi

case x"$GRUB_FS" in
    xbtrfs)
	if [ "x${SUSE_BTRFS_SNAPSHOT_BOOTING}" = "xtrue" ]; then
	GRUB_CMDLINE_LINUX="${GRUB_CMDLINE_LINUX} \${extra_cmdline}"
	else
	rootsubvol="`make_system_path_relative_to_its_root /`"
	rootsubvol="${rootsubvol#/}"
	if [ "x${rootsubvol}" != x ]; then
	    GRUB_CMDLINE_LINUX="rootflags=subvol=${rootsubvol} ${GRUB_CMDLINE_LINUX}"
	fi
	fi;;
    xzfs)
	rpool=`${grub_probe} --device ${GRUB_DEVICE} --target=fs_label 2>/dev/null || true`
	bootfs="`make_system_path_relative_to_its_root / | sed -e "s,@$,,"`"
	LINUX_ROOT_DEVICE="ZFS=${rpool}${bootfs%/}"
	;;
esac

populate_header_warn()
{
if [ "x${BLS_POPULATE_MENU}" = "xtrue" ]; then
  bls_parser="10_linux script"
else
  bls_parser="blscfg command"
fi
cat <<EOF

# This section was generated by a script. Do not modify the generated file - all changes
# will be lost the next time file is regenerated. Instead edit the BootLoaderSpec files.
#
# The $bls_parser parses the BootLoaderSpec files stored in /boot/loader/entries and
# populates the boot menu. Please refer to the Boot Loader Specification documentation
# for the files format: https://systemd.io/BOOT_LOADER_SPECIFICATION/.

EOF
}

read_config()
{
    config_file=${1}
    title=""
    initrd=""
    options=""
    linux=""
    grub_arg=""

    while read -r line
    do
        record=$(echo ${line} | cut -f 1 -d ' ')
        value=$(echo ${line} | cut -s -f2- -d ' ')
        case "${record}" in
            "title")
                title=${value}
                ;;
            "initrd")
                initrd=${value}
                ;;
            "linux")
                linux=${value}
                ;;
            "options")
                options=${value}
                ;;
            "grub_arg")
                grub_arg=${value}
                ;;
        esac
    done < ${config_file}
}

blsdir="/boot/loader/entries"

get_sorted_bls()
{
    if ! [ -d "${blsdir}" ] || [ -f /run/ostree-booted ] || [ -d /ostree/repo ]; then
        return
    fi

    local IFS=$'\n'

    files=($(for bls in ${blsdir}/*.conf; do
        if ! [[ -e "${bls}" ]] ; then
            continue
        fi
        bls="${bls%.conf}"
        bls="${bls##*/}"
        echo "${bls}"
    done | sort -Vr 2>/dev/null)) || :

    echo "${files[@]}"
}

update_bls_cmdline()
{
    local cmdline="root=${LINUX_ROOT_DEVICE} ro ${GRUB_CMDLINE_LINUX} ${GRUB_CMDLINE_LINUX_DEFAULT}"
    local -a files=($(get_sorted_bls))

    if [ -w /etc/kernel ] &&
           [[ ! -f /etc/kernel/cmdline ||
                  /etc/kernel/cmdline -ot /etc/default/grub ]]; then
        # anaconda has the correct information to create this during install;
        # afterward, grubby will take care of syncing on updates.  If the user
        # has modified /etc/default/grub, try to cope.
        echo "$cmdline" > /etc/kernel/cmdline
    fi

    for bls in "${files[@]}"; do
        local options="${cmdline}"
        if [ -z "${bls##*debug*}" ]; then
            options="${options} ${GRUB_CMDLINE_LINUX_DEBUG}"
        fi
        options="$(echo "${options}" | sed -e 's/\//\\\//g')"
        sed -i -e "s/^options.*/options ${options}/" "${blsdir}/${bls}.conf"
    done
}

populate_menu()
{
    local -a files=($(get_sorted_bls))

    gettext_printf "Generating boot entries from BLS files...\n" >&2

    for bls in "${files[@]}"; do
        read_config "${blsdir}/${bls}.conf"

        menu="${menu}menuentry '${title}' ${grub_arg} --id=${bls} {\n"
        menu="${menu}\t linux ${linux} ${options}\n"
        if [ -n "${initrd}" ] ; then
            menu="${menu}\t initrd ${boot_prefix}${initrd}\n"
        fi
        menu="${menu}}\n\n"
    done
    # The printf command seems to be more reliable across shells for special character (\n, \t) evaluation
    printf "$menu"
}

# Make BLS the default if GRUB_ENABLE_BLSCFG was not set and grubby is not installed.
if [ -z "${GRUB_ENABLE_BLSCFG}" ] && ! command -v new-kernel-pkg >/dev/null; then
	  GRUB_ENABLE_BLSCFG="true"
fi

if [ "x${GRUB_ENABLE_BLSCFG}" = "xtrue" ]; then
  if [ x$dirname = x/ ]; then
    if [ -z "${prepare_root_cache}" ]; then
      prepare_grub_to_access_device ${GRUB_DEVICE}
    fi
  else
    if [ -z "${prepare_boot_cache}" ]; then
      prepare_grub_to_access_device ${GRUB_DEVICE_BOOT}
    fi
  fi

  if [ -d /sys/firmware/efi ]; then
      bootefi_device="`${grub_probe} --target=device /boot/efi/`"
      prepare_grub_to_access_device_with_variable boot ${bootefi_device}
  else
      boot_device="`${grub_probe} --target=device /boot/`"
      prepare_grub_to_access_device_with_variable boot ${boot_device}
  fi

  arch="$(uname -m)"
  if [ "x${arch}" = "xppc64le" ] && [ -d /sys/firmware/opal ]; then

      BLS_POPULATE_MENU="true"
      petitboot_path="/sys/firmware/devicetree/base/ibm,firmware-versions/petitboot"

      if test -e ${petitboot_path}; then
          read -r -d '' petitboot_version < ${petitboot_path}
          petitboot_version="$(echo ${petitboot_version//v})"

	  if test -n ${petitboot_version}; then
              major_version="$(echo ${petitboot_version} | cut -d . -f1)"
              minor_version="$(echo ${petitboot_version} | cut -d . -f2)"

              re='^[0-9]+$'
              if [[ $major_version =~ $re ]] && [[ $minor_version =~ $re ]] &&
                 ([[ ${major_version} -gt 1 ]] ||
                  [[ ${major_version} -eq 1 &&
                     ${minor_version} -ge 8  ]]); then
                  BLS_POPULATE_MENU="false"
              fi
          fi
      fi
  fi

  populate_header_warn

  cat << EOF
# The kernelopts variable should be defined in the grubenv file. But to ensure that menu
# entries populated from BootLoaderSpec files that use this variable work correctly even
# without a grubenv file, define a fallback kernelopts variable if this has not been set.
#
# The kernelopts variable in the grubenv file can be modified using the grubby tool or by
# executing the grub2-mkconfig tool. For the latter, the values of the GRUB_CMDLINE_LINUX
# and GRUB_CMDLINE_LINUX_DEFAULT options from /etc/default/grub file are used to set both
# the kernelopts variable in the grubenv file and the fallback kernelopts variable.
if [ -z "\${kernelopts}" ]; then
  set kernelopts="root=${LINUX_ROOT_DEVICE} ro ${GRUB_CMDLINE_LINUX} ${GRUB_CMDLINE_LINUX_DEFAULT}"
fi
EOF

  if [ "x${GRUB_UPDATE_BLS_CMDLINE}" = "xyes" ]; then
      update_bls_cmdline
  fi

  if [ "x${BLS_POPULATE_MENU}" = "xtrue" ]; then
      populate_menu
  else
      cat << EOF

insmod blscfg
blscfg
EOF
  fi

  if [ "x${GRUB_GRUBENV_UPDATE}" = "xyes" ]; then
      blsdir="/boot/loader/entries"
      [ -d "${blsdir}" ] && GRUB_BLS_FS="$(${grub_probe} --target=fs ${blsdir})"
      if [ "x${GRUB_BLS_FS}" = "xbtrfs" ] || [ "x${GRUB_BLS_FS}" = "xzfs" ]; then
          blsdir=$(make_system_path_relative_to_its_root "${blsdir}")
          if [ "x${blsdir}" != "x/loader/entries" ] && [ "x${blsdir}" != "x/boot/loader/entries" ]; then
              ${grub_editenv} - set blsdir="${blsdir}"
          fi
      fi

      if [ -n "${GRUB_EARLY_INITRD_LINUX_CUSTOM}" ]; then
          ${grub_editenv} - set early_initrd="${GRUB_EARLY_INITRD_LINUX_CUSTOM}"
      fi

      if [ -n "${GRUB_DEFAULT_DTB}" ]; then
          ${grub_editenv} - set devicetree="${GRUB_DEFAULT_DTB}"
      fi

      if [ -n "${GRUB_SAVEDEFAULT}" ]; then
           ${grub_editenv} - set save_default="${GRUB_SAVEDEFAULT}"
      fi
  fi

  exit 0
fi

mktitle ()
{
  local title_type
  local version
  local OS_NAME
  local OS_VERS

  title_type=$1 && shift
  version=$1 && shift

  OS_NAME="$(eval $(grep ^NAME= /etc/os-release) ; echo ${NAME})"
  OS_VERS="$(eval $(grep ^VERSION= /etc/os-release) ; echo ${VERSION})"

  case $title_type in
    recovery)
      title=$(printf '%s (%s) %s (recovery mode)' \
                     "${OS_NAME}" "${version}" "${OS_VERS}")
      ;;
    *)
      title=$(printf '%s (%s) %s' \
                     "${OS_NAME}" "${version}" "${OS_VERS}")
      ;;
  esac
  echo -n ${title}
}

title_correction_code=

linux_entry ()
{
  os="$1"
  version="$2"
  type="$3"
  isdebug="$4"
  args="$5"

  if [ -z "$boot_device_id" ]; then
      boot_device_id="$(grub_get_device_id "${GRUB_DEVICE}")"
  fi

  if [ x$type != xsimple ] ; then
      title=$(mktitle "$type" "$version")
      if [ x"$title" = x"$GRUB_ACTUAL_DEFAULT" ] || [ x"Previous Linux versions>$title" = x"$GRUB_ACTUAL_DEFAULT" ]; then
	  replacement_title="$(echo "Advanced options for ${OS}" | sed 's,>,>>,g')>$(echo "$title" | sed 's,>,>>,g')"
	  quoted="$(echo "$GRUB_ACTUAL_DEFAULT" | grub_quote)"
	  title_correction_code="${title_correction_code}if [ \"x\$default\" = '$quoted' ]; then default='$(echo "$replacement_title" | grub_quote)'; fi;"
      fi
      if [ x$isdebug = xdebug ]; then
	  title="$title${GRUB_LINUX_DEBUG_TITLE_POSTFIX}"
      fi
      echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'gnulinux-$version-$type-$boot_device_id' {" | sed "s/^/$submenu_indentation/"
  else
      echo "menuentry '$(echo "$os" | grub_quote)' ${CLASS} \$menuentry_id_option 'gnulinux-simple-$boot_device_id' {" | sed "s/^/$submenu_indentation/"
  fi      
  if [ x$type != xrecovery ] ; then
      save_default_entry | grub_add_tab
  fi

  # Use ELILO's generic "efifb" when it's known to be available.
  # FIXME: We need an interface to select vesafb in case efifb can't be used.
  if [ "x$GRUB_GFXPAYLOAD_LINUX" = x ]; then
      echo "	load_video" | sed "s/^/$submenu_indentation/"
      if grep -qx "CONFIG_FB_EFI=y" "${config}" 2> /dev/null \
	  && grep -qx "CONFIG_VT_HW_CONSOLE_BINDING=y" "${config}" 2> /dev/null; then
	  echo "	set gfxpayload=keep" | sed "s/^/$submenu_indentation/"
      fi
  else
      if [ "x$GRUB_GFXPAYLOAD_LINUX" != xtext ]; then
	  echo "	load_video" | sed "s/^/$submenu_indentation/"
      fi
      echo "	set gfxpayload=$GRUB_GFXPAYLOAD_LINUX" | sed "s/^/$submenu_indentation/"
  fi

  echo "	insmod gzio" | sed "s/^/$submenu_indentation/"

  if [ x$dirname = x/ ]; then
    if [ -z "${prepare_root_cache}" ]; then
      prepare_root_cache="$(prepare_grub_to_access_device ${GRUB_DEVICE} | grub_add_tab)"
    fi
    printf '%s\n' "${prepare_root_cache}" | sed "s/^/$submenu_indentation/"
  else
    if [ -z "${prepare_boot_cache}" ]; then
      prepare_boot_cache="$(prepare_grub_to_access_device ${GRUB_DEVICE_BOOT} | grub_add_tab)"
    fi
    printf '%s\n' "${prepare_boot_cache}" | sed "s/^/$submenu_indentation/"
  fi
  message="$(gettext_printf "Loading Linux %s ..." ${version})"
  sed "s/^/$submenu_indentation/" << EOF
	echo	'$(echo "$message" | grub_quote)'
	linux	${rel_dirname}/${basename} root=${linux_root_device_thisversion} ro ${args}
EOF
  if test -n "${initrd}" ; then
    # TRANSLATORS: ramdisk isn't identifier. Should be translated.
    message="$(gettext_printf "Loading initial ramdisk ...")"
    initrd_path=
    for i in ${initrd}; do
      initrd_path="${initrd_path} ${rel_dirname}/${i}"
    done
    sed "s/^/$submenu_indentation/" << EOF
	echo	'$(echo "$message" | grub_quote)'
	initrd	$(echo $initrd_path)
EOF
  fi
  if test -n "${fdt}" ; then
    message="$(gettext_printf "Loading fdt ...")"
    sed "s/^/$submenu_indentation/" << EOF
	echo	'$(echo "$message" | grub_quote)'
	devicetree	${rel_dirname}/${fdt}
EOF
  fi
  sed "s/^/$submenu_indentation/" << EOF
}
EOF
}

machine=`uname -m`
case "x$machine" in
    xi?86 | xx86_64)
	list=
	for i in /boot/vmlinuz-* /vmlinuz-* /boot/kernel-* ; do
	    if grub_file_is_not_garbage "$i" ; then list="$list $i" ; fi
	done ;;
    *) 
	list=
	for i in /boot/vmlinuz-* /boot/vmlinux-* /vmlinuz-* /vmlinux-* /boot/kernel-* ; do
                  if grub_file_is_not_garbage "$i" ; then list="$list $i" ; fi
	done ;;
esac

case "$machine" in
    i?86) GENKERNEL_ARCH="x86" ;;
    mips|mips64) GENKERNEL_ARCH="mips" ;;
    mipsel|mips64el) GENKERNEL_ARCH="mipsel" ;;
    arm*) GENKERNEL_ARCH="arm" ;;
    *) GENKERNEL_ARCH="$machine" ;;
esac

prepare_boot_cache=
prepare_root_cache=
boot_device_id=
title_correction_code=

# Extra indentation to add to menu entries in a submenu. We're not in a submenu
# yet, so it's empty. In a submenu it will be equal to '\t' (one tab).
submenu_indentation=""

is_top_level=true
while [ "x$list" != "x" ] ; do
  linux=`version_find_latest $list`
  gettext_printf "Found linux image: %s\n" "$linux" >&2

  basename=`basename $linux`
  dirname=`dirname $linux`
  rel_dirname=`make_system_path_relative_to_its_root $dirname`
  version=`echo $basename | sed -e "s,^[^0-9]*-,,g"`
  alt_version=`echo $version | sed -e "s,\.old$,,g"`
  linux_root_device_thisversion="${LINUX_ROOT_DEVICE}"

  initrd_early=
  for i in ${GRUB_EARLY_INITRD_LINUX_STOCK} \
	   ${GRUB_EARLY_INITRD_LINUX_CUSTOM}; do
    if test -e "${dirname}/${i}" ; then
      initrd_early="${initrd_early} ${i}"
    fi
  done

  initrd_real=
  for i in "initrd.img-${version}" "initrd-${version}.img" "initrd-${version}.gz" \
	   "initrd-${version}" "initramfs-${version}.img" \
	   "initrd.img-${alt_version}" "initrd-${alt_version}.img" \
	   "initrd-${alt_version}" "initramfs-${alt_version}.img" \
	   "initramfs-genkernel-${version}" \
	   "initramfs-genkernel-${alt_version}" \
	   "initramfs-genkernel-${GENKERNEL_ARCH}-${version}" \
	   "initramfs-genkernel-${GENKERNEL_ARCH}-${alt_version}"; do
    if test -e "${dirname}/${i}" ; then
      initrd_real="${i}"
      break
    fi
  done

  initrd=
  if test -n "${initrd_early}" || test -n "${initrd_real}"; then
    initrd="${initrd_early} ${initrd_real}"

    initrd_display=
    for i in ${initrd}; do
      initrd_display="${initrd_display} ${dirname}/${i}"
    done
    if [ "x${GRUB_ENABLE_BLSCFG}" != "xtrue" ]; then
      gettext_printf "Found initrd image: %s\n" "$(echo $initrd_display)" >&2
    fi
  fi

  fdt=
  for i in "dtb-${version}" "dtb-${alt_version}"; do
    if test -f "${dirname}/${i}/${GRUB_DEFAULT_DTB}" ; then
      fdt="${i}/${GRUB_DEFAULT_DTB}"
      break
    fi
  done

  config=
  for i in "${dirname}/config-${version}" "${dirname}/config-${alt_version}" "/etc/kernels/kernel-config-${version}" ; do
    if test -e "${i}" ; then
      config="${i}"
      break
    fi
  done

  initramfs=
  if test -n "${config}" ; then
      initramfs=`grep CONFIG_INITRAMFS_SOURCE= "${config}" | cut -f2 -d= | tr -d \"`
  fi

  if test -z "${initramfs}" && test -z "${initrd_real}" ; then
    # "UUID=" and "ZFS=" magic is parsed by initrd or initramfs.  Since there's
    # no initrd or builtin initramfs, it can't work here.
    if [ "x${GRUB_DEVICE_PARTUUID}" = "x" ] \
	|| [ "x${GRUB_DISABLE_LINUX_PARTUUID}" = "xtrue" ]; then

	linux_root_device_thisversion=${GRUB_DEVICE}
    else
	linux_root_device_thisversion=PARTUUID=${GRUB_DEVICE_PARTUUID}
    fi
  fi

  # The GRUB_DISABLE_SUBMENU option used to be different than others since it was
  # mentioned in the documentation that has to be set to 'y' instead of 'true' to
  # enable it. This caused a lot of confusion to users that set the option to 'y',
  # 'yes' or 'true'. This was fixed but all of these values must be supported now.
  if [ "x${GRUB_DISABLE_SUBMENU}" = xyes ] || [ "x${GRUB_DISABLE_SUBMENU}" = xy ]; then
    GRUB_DISABLE_SUBMENU="true"
  fi

  if [ "x$is_top_level" = xtrue ] && [ "x${GRUB_DISABLE_SUBMENU}" != xtrue ]; then
    linux_entry "${OS}" "${version}" simple standard \
    "${GRUB_CMDLINE_LINUX} ${GRUB_CMDLINE_LINUX_DEFAULT}"
    if [ "x$GRUB_LINUX_MAKE_DEBUG" = "xtrue" ]; then
      linux_entry "${OS}" "${version}" simple debug \
        "${GRUB_CMDLINE_LINUX} ${GRUB_CMDLINE_LINUX_DEFAULT} ${GRUB_CMDLINE_LINUX_DEBUG}"
    fi

    submenu_indentation="$grub_tab"

    if [ -z "$boot_device_id" ]; then
	boot_device_id="$(grub_get_device_id "${GRUB_DEVICE}")"
    fi
    # TRANSLATORS: %s is replaced with an OS name
    echo "submenu '$(gettext_printf "Advanced options for %s" "${OS}" | grub_quote)' \$menuentry_id_option 'gnulinux-advanced-$boot_device_id' {"
    is_top_level=false
  fi

  linux_entry "${OS}" "${version}" advanced standard \
              "${GRUB_CMDLINE_LINUX} ${GRUB_CMDLINE_LINUX_DEFAULT}"
  if [ "x$GRUB_LINUX_MAKE_DEBUG" = "xtrue" ]; then
    linux_entry "${OS}" "${version}" advanced debug \
                "${GRUB_CMDLINE_LINUX} ${GRUB_CMDLINE_LINUX_DEFAULT} ${GRUB_CMDLINE_LINUX_DEBUG}"
  fi

  if [ "x${GRUB_DISABLE_RECOVERY}" != "xtrue" ]; then
    linux_entry "${OS}" "${version}" recovery standard \
                "single ${GRUB_CMDLINE_LINUX}"
  fi

  list=`echo $list | tr ' ' '\n' | fgrep -vx "$linux" | tr '\n' ' '`
done

# If at least one kernel was found, then we need to
# add a closing '}' for the submenu command.
if [ x"$is_top_level" != xtrue ]; then
  echo '}'
fi

echo "$title_correction_code"
